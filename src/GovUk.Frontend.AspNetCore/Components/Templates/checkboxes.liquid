{% from "error-message.macro" import govukErrorMessage %}
{% from "fieldset.macro" import govukFieldset %}
{% from "hint.macro" import govukHint %}
{% from "label.macro" import govukLabel %}

{% comment %} If an id 'prefix' is not passed, fall back to using the name attribute
instead. We need this for error messages and hints as well {% endcomment %}
{% assign idPrefix = params.idPrefix | default: params.name %}

{% comment %} a record of other elements that we need to associate with the input using
aria-describedby â€“ for example hints or error messages {% endcomment %}
{% assign describedBy = params.describedBy | default: "" %}
{% if params.fieldset.describedBy %}
  {% assign describedBy = params.fieldset.describedBy %}
{% endif %}

{% comment %} fieldset is false by default {% endcomment %}
{% assign hasFieldset = istruthy(params.fieldset) %}

{%- macro _checkboxItem(params, item, index) -%}
  {%- comment %} If the user explicitly sets an id, use this instead of the regular idPrefix {% endcomment %}
  {%- comment %} The first id should not have a number suffix so it's easy to link to from the error summary component {% endcomment %}
  {%- assign itemId = item.id | default: (idPrefix | append: ifelse((index > 1), ('-' | append: index), '')) %}
  {%- assign itemName = item.name | default: params.name %}
  {%- assign conditionalId = "conditional-" | append: itemId %}
  {%- if item.divider -%}
    <div class="govuk-checkboxes__divider">{{ item.divider }}</div>
  {%- else %}
    {%- assign isChecked = item.checked | default: (params.values contains item.value and item.checked != false) | default: false %}
    {%- assign hasHint = istruthy((item.hint.text or item.hint.html)) %}
    {%- assign itemHintId = ifelse(hasHint, (itemId | append: "-item-hint"), "") %}
    {%- assign itemDescribedBy = ifelse(hasFieldset, "", describedBy) %}
    {%- assign itemDescribedBy = (itemDescribedBy | append: " " | append: itemHintId) | strip -%}
    <div class="govuk-checkboxes__item">
      <input class="govuk-checkboxes__input" id="{{ itemId }}" name="{{ itemName }}" type="checkbox" value="{{ item.value }}"
        {%- if isChecked %} checked{% endif -%}
        {%- if item.disabled %} disabled{% endif -%}
        {%- if item.conditional.html != blank %} data-aria-controls="{{ conditionalId }}"{% endif -%}
        {%- if item.behaviour %} data-behaviour="{{ item.behaviour }}"{% endif -%}
        {%- if itemDescribedBy != blank %} aria-describedby="{{ itemDescribedBy }}"{% endif -%}
        {{- govukAttributes(item.attributes) }}>
      {{ govukLabel(dict(
        html = item.html,
        text = item.text,
        classes = (('govuk-checkboxes__label' | append: (' ' | append: item.label.classes)) | rstrip),
        attributes = item.label.attributes,
        for = itemId)) | strip | indent: 6 }}
      {%- if hasHint %}
      {{ govukHint(dict(
        id = itemHintId,
        classes = (('govuk-checkboxes__hint' | append: (' ' | append: item.hint.classes))| rstrip),
        attributes = item.hint.attributes,
        html = item.hint.html,
        text = item.hint.text
        )) | strip | indent: 6 }}
      {%- endif %}
    </div>
    {%- if item.conditional.html != blank %}
    <div class="govuk-checkboxes__conditional {%- if isChecked == false %} govuk-checkboxes__conditional--hidden{% endif %}" id="{{ conditionalId }}">
      {{ item.conditional.html | raw | strip }}
    </div>
    {%- endif %}
  {%- endif %}
{%- endmacro -%}

{% comment %} Capture the HTML so we can optionally nest it in a fieldset {% endcomment %}
{% capture innerHtml %}
{%- if params.hint %}
  {% assign hintId = idPrefix | append: '-hint' %}
  {% assign describedBy = (describedBy | append: ' ' | append: hintId | lstrip) %}
  {{ govukHint(dict(
    id = hintId,
    classes = params.hint.classes,
    attributes = params.hint.attributes,
    html = params.hint.html,
    text = params.hint.text)) | strip | indent: 2 }}
{%- endif %}
{%- if params.errorMessage %}
  {%- assign errorId = idPrefix | append: '-error' %}
  {%- assign describedBy = (describedBy | append: ' ' | append: errorId | lstrip) %}
  {{ govukErrorMessage(dict(
    id = errorId,
    classes = params.errorMessage.classes,
    attributes = params.errorMessage.attributes,
    html = params.errorMessage.html,
    text = params.errorMessage.text,
    visuallyHiddenText = params.errorMessage.visuallyHiddenText)) | strip | indent: 2 }}
{%- endif %}
  <div class="govuk-checkboxes {%- if params.classes %} {{ params.classes }}{% endif %}"
    {{- govukAttributes(params.attributes) }} data-module="govuk-checkboxes">
    {%- if params.formGroup.beforeInputs %}
    {{ params.formGroup.beforeInputs.html | raw | strip | indent: 4 | default: params.formGroup.beforeInputs.text }}
    {% endif %}
    {%- for item in params.items %}
    {% if item %}
      {{- _checkboxItem(params, item, forloop.index) -}}
    {% endif -%}
    {% endfor %}
    {%- if params.formGroup.afterInputs %}
    {{ params.formGroup.afterInputs.html | raw | strip | indent: 4 | default: params.formGroup.afterInputs.text }}
    {% endif %}
  </div>
{% endcapture %}

<div class="govuk-form-group {%- if params.errorMessage %} govuk-form-group--error{% endif %} {%- if params.formGroup.classes %} {{ params.formGroup.classes }}{% endif %}"
  {{- govukAttributes(params.formGroup.attributes) }}>
{%- if hasFieldset %}
  {{ govukFieldset(dict(
    describedBy = describedBy,
    classes = params.fieldset.classes,
    attributes = params.fieldset.attributes,
    legend = params.fieldset.legend,
    html = (innerHtml | strip))) | strip | indent: 2 }}
{%- else %}
  {{ innerHtml | strip -}}
{% endif %}
</div>